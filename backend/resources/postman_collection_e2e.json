{
	"info": {
		"_postman_id": "39be4eaa-b26d-4bcf-9ee3-54e04c84da6b",
		"name": "ugram-backend-e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Standard tests",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user.username}}\",\n    \"email\": \"{{user.email}}\",\n    \"phoneNumber\": \"{{user.phoneNumber}}\",\n    \"firstName\": \"{{user.firstName}}\",\n    \"lastName\": \"{{user.lastName}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Token Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"postman.setEnvironmentVariable(\"user.username\", jsonData.username);\r",
											"postman.setEnvironmentVariable(\"user.username.partial\", jsonData.username.substring(1,4));\r",
											"postman.setEnvironmentVariable(\"user.username.uppercase\", jsonData.username.toUpperCase());\r",
											"postman.setEnvironmentVariable(\"user.firstName\", jsonData.firstName);\r",
											"postman.setEnvironmentVariable(\"user.lastName\", jsonData.lastName);\r",
											"postman.setEnvironmentVariable(\"user.email\", jsonData.email);\r",
											"postman.setEnvironmentVariable(\"user.phoneNumber\", jsonData.phoneNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "{{cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tokenInfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tokenInfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create other user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user.username.other}}\",\n    \"email\": \"{{user.email.other}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.other}}\",\n    \"firstName\": \"{{user.firstName.other}}\",\n    \"lastName\": \"{{user.lastName.other}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const location = pm.response.headers.get(\"Location\");",
											"const postId = location.split(\"/\")[2];",
											"",
											"postman.setEnvironmentVariable(\"post.postId\", postId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "{{cookie}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reference\": \"{{post.reference}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag}}\",\n        \"{{post.hashtags.secondHashtag}}\"\n    ],\n    \"usertags\": [\"{{user.username.other}}\"],\n    \"description\": \"{{post.description}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{user.username}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{user.username}}",
										"posts"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username",
												"posts"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "users",
							"item": [
								{
									"name": "{username}",
									"item": [
										{
											"name": "posts",
											"item": [
												{
													"name": "Get user's posts",
													"item": [
														{
															"name": "Username",
															"item": [
																{
																	"name": "Non existent",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 404\", () => {",
																					"    pm.response.to.have.status(404);",
																					"});",
																					"",
																					"pm.test(\"Returns non existent error message\", () => {",
																					"    const username = postman.getEnvironmentVariable(\"user.username.2\");",
																					"    const expectedMessage = `User ${username} doesn't exist`;",
																					"",
																					"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": ""
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username.2}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username.2}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users"
																					]
																				}
																			},
																			"_postman_previewlanguage": "text",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "text/plain"
																				}
																			],
																			"cookie": [],
																			"body": ""
																		}
																	]
																}
															]
														},
														{
															"name": "Valid request",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns list (1 post created)\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
																			"});",
																			"",
																			"pm.test(\"Returns count (1 post created)\", () => {",
																			"    pm.expect(pm.response.json().count).to.be.equal(1);",
																			"});",
																			"",
																			"pm.test(\"Returns firstKey\", () => {",
																			"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
																			"});",
																			"",
																			"pm.test(\"Returns lastKey\", () => {",
																			"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
																			"});",
																			"",
																			"pm.test(\"Returns ID\", () => {",
																			"    pm.expect(pm.response.json().results[0].id).to.not.equal(null);",
																			"});",
																			"",
																			"pm.test(\"Returns reference\", () => {",
																			"    const reference = postman.getEnvironmentVariable(\"post.reference\");",
																			"",
																			"    pm.expect(reference).to.contain(pm.response.json().results[0].reference);",
																			"});",
																			"",
																			"pm.test(\"Returns description\", () => {",
																			"    const description = postman.getEnvironmentVariable(\"post.description\");",
																			"",
																			"    pm.expect(description).to.contain(pm.response.json().results[0].description);",
																			"});",
																			"",
																			"pm.test(\"Returns hashtags\", () => {",
																			"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag\");",
																			"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag\");",
																			"",
																			"    pm.expect(pm.response.json().results[0].hashtags.length).to.be.equal(2);",
																			"    pm.expect(firstHashtag).to.contain(pm.response.json().results[0].hashtags[0]);",
																			"    pm.expect(secondHashtag).to.contain(pm.response.json().results[0].hashtags[1]);",
																			"});",
																			"",
																			"pm.test(\"Returns usertags\", () => {",
																			"    const usertag = postman.getEnvironmentVariable(\"user.username.other\");",
																			"",
																			"    pm.expect(pm.response.json().results[0].usertags.length).to.be.equal(1);",
																			"    pm.expect(usertag).to.contain(pm.response.json().results[0].usertags[0]);",
																			"});",
																			"",
																			"pm.test(\"Returns user\", () => {",
																			"    const user = postman.getEnvironmentVariable(\"user.username\");",
																			"",
																			"    pm.expect(user).to.contain(pm.response.json().results[0].user);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users"
																			]
																		}
																	},
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "Create post",
													"item": [
														{
															"name": "Username",
															"item": [
																{
																	"name": "Non existent",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 401\", () => {",
																					"    pm.response.to.have.status(401);",
																					"});",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username.2}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username.2}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "Reference",
															"item": [
																{
																	"name": "Null",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": null,\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Missing",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"type": "text",
																				"value": "{{cookie}}"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (number)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": 2,\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (array)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": [\"{{post.reference.2}}\"],\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (object)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": {\n        \"reference\": \"{{post.reference.2}}\"\n    },\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "Description",
															"item": [
																{
																	"name": "Bad type (number)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": 2\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (array)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": [\"{{post.description.2}}\"]\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			],
																			"query": [
																				{
																					"key": "",
																					"value": "",
																					"disabled": true
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (object)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": {\n        \"description\": \"{{post.description.2}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "Hashtags",
															"item": [
																{
																	"name": "Bad type (number)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [2],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (array)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [[\"{{post.hashtags.firstHashtag.2}}\"]],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (object)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        {\n            \"hashtags\": \"{{post.hashtags.firstHashtag.2}}\"\n        }\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "Usertags",
															"item": [
																{
																	"name": "Non existent",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 404\", () => {",
																					"    pm.response.to.have.status(404);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [\"nonExistent\"],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (number)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [2],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (array)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [[\"{{user.username.other}}\"]],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																},
																{
																	"name": "Bad type (object)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Returns status 400\", () => {",
																					"    pm.response.to.have.status(400);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Cookie",
																				"value": "{{cookie}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [\n        {\n            \"usertags\": \"{{user.username.other}}\"\n        }\n    ],\n    \"description\": \"{{post.description.2}}\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				"{{user.username}}",
																				"posts"
																			]
																		}
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																				},
																				"url": {
																					"raw": "{{baseUrl}}/users/:username/posts",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"users",
																						":username",
																						"posts"
																					],
																					"variable": [
																						{
																							"key": "username"
																						}
																					]
																				}
																			},
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "Valid request",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 201\", () => {",
																			"    pm.response.to.have.status(201);",
																			"});",
																			"",
																			"pm.test(\"Returns header location\", () => {",
																			"    const postId = pm.response.json().id;",
																			"    postman.setEnvironmentVariable(\"post.id.2\", postId);",
																			"    const expectedHeaderLocation = `/posts/${postId}`;",
																			"",
																			"    pm.response.to.have.header(\"Location\");",
																			"    pm.response.to.be.header(\"Location\", expectedHeaderLocation);",
																			"});",
																			"",
																			"pm.test(\"Returns ID\", () => {",
																			"    pm.expect(pm.response.json().id).to.not.equal(null);",
																			"});",
																			"",
																			"pm.test(\"Returns reference\", () => {",
																			"    const reference = postman.getEnvironmentVariable(\"post.reference.2\");",
																			"",
																			"    pm.expect(reference).to.contain(pm.response.json().reference);",
																			"});",
																			"",
																			"pm.test(\"Returns description\", () => {",
																			"    const description = postman.getEnvironmentVariable(\"post.description.2\");",
																			"",
																			"    pm.expect(description).to.contain(pm.response.json().description);",
																			"});",
																			"",
																			"pm.test(\"Returns hashtags\", () => {",
																			"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag.2\");",
																			"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag.2\");",
																			"",
																			"    pm.expect(pm.response.json().hashtags.length).to.be.equal(2);",
																			"    pm.expect(firstHashtag).to.contain(pm.response.json().hashtags[0]);",
																			"    pm.expect(secondHashtag).to.contain(pm.response.json().hashtags[1]);",
																			"});",
																			"",
																			"pm.test(\"Returns user\", () => {",
																			"    const user = postman.getEnvironmentVariable(\"user.username\");",
																			"",
																			"    pm.expect(user).to.contain(pm.response.json().user);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														},
														{
															"name": "Unauthorized",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 401\", () => {",
																			"    pm.response.to.have.status(401);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie.invalid}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.2}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														}
													]
												}
											]
										},
										{
											"name": "Get user",
											"item": [
												{
													"name": "Username",
													"item": [
														{
															"name": "Non existent",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 404\", () => {",
																			"    pm.response.to.have.status(404);",
																			"});",
																			"",
																			"pm.test(\"Returns non existent error message\", () => {",
																			"    const username = postman.getEnvironmentVariable(\"user.username.2\");",
																			"    const expectedMessage = `User ${username} doesn't exist`;",
																			"",
																			"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username.2}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username.2}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users"
																			]
																		}
																	},
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "Valid request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Returns username\", () => {",
																	"    const username = postman.getEnvironmentVariable(\"user.username\");",
																	"",
																	"    pm.expect(username).to.contain(pm.response.json().username);",
																	"});",
																	"",
																	"pm.test(\"Returns email\", () => {",
																	"    const email = postman.getEnvironmentVariable(\"user.email\");",
																	"",
																	"    pm.expect(email).to.contain(pm.response.json().email);",
																	"});",
																	"",
																	"pm.test(\"Returns phone number\", () => {",
																	"    const phoneNumber = postman.getEnvironmentVariable(\"user.phoneNumber\");",
																	"",
																	"    pm.expect(phoneNumber || null).to.be.eql(pm.response.json().phoneNumber || null);",
																	"});",
																	"",
																	"pm.test(\"Returns first name\", () => {",
																	"    const firstName = postman.getEnvironmentVariable(\"user.firstName\");",
																	"",
																	"    pm.expect(firstName).to.contain(pm.response.json().firstName);",
																	"});",
																	"",
																	"pm.test(\"Returns last name\", () => {",
																	"    const lastName = postman.getEnvironmentVariable(\"user.lastName\");",
																	"",
																	"    pm.expect(lastName).to.contain(pm.response.json().lastName);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/users/{{user.username}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"{{user.username}}"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Modify user",
											"item": [
												{
													"name": "Username",
													"item": [
														{
															"name": "Non existent",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 401\", () => {",
																			"    pm.response.to.have.status(401);",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"email\": \"{{user.email.new}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.new}}\",\n    \"firstName\": \"{{user.firstName.new}}\",\n    \"lastName\": \"{{user.lastName.new}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username.2}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username.2}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users"
																			]
																		}
																	},
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "Email",
													"item": [
														{
															"name": "Already in use",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 409\", () => {",
																			"    pm.response.to.have.status(409);",
																			"});",
																			"",
																			"pm.test(\"Returns already in use error message\", () => {",
																			"    const email = postman.getEnvironmentVariable(\"user.email.other\");",
																			"    const expectedMessage = `Email ${email} already in use`;",
																			"",
																			"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"email\": \"{{user.email.other}}\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"email\": 2\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"email\": [\"{{user.email.new}}\"]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"email\": {\n        \"email\": \"{{user.email.new}}\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad format",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"email\": \"badFormat\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "Phone number",
													"item": [
														{
															"name": "Already in use",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 409\", () => {",
																			"    pm.response.to.have.status(409);",
																			"});",
																			"",
																			"pm.test(\"Returns already in use error message\", () => {",
																			"    const phoneNumber = postman.getEnvironmentVariable(\"user.phoneNumber.other\");",
																			"    const expectedMessage = `Phone number ${phoneNumber} already in use`;",
																			"",
																			"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"phoneNumber\": \"{{user.phoneNumber.other}}\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"phoneNumber\": 2\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"phoneNumber\": [\"{{user.phoneNumber.new}}\"]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"phoneNumber\": {\n        \"phoneNumber\": \"{{user.phoneNumber.new}}\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad format",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"phoneNumber\": \"badFormat\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "First name",
													"item": [
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"firstName\": 2\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"firstName\": [\"{{user.firstName.new}}\"]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"firstName\": {\n        \"firstName\": \"{{user.firstName.new}}\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad format",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"firstName\": \"\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "Last name",
													"item": [
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"lastName\": 2\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"lastName\": [\"{{user.lastName.new}}\"]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"lastName\": {\n        \"lastName\": \"{{user.lastName.new}}\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "Description",
													"item": [
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"description\": 2\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"description\": [\"{{user.description}}\"]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"description\": {\n        \"description\": \"{{user.description}}\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "Avatar reference",
													"item": [
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"avatarReference\": 2\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"avatarReference\": [\"{{user.avatarReference}}\"]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"avatarReference\": {\n        \"avatarReference\": \"{{user.avatarReference}}\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "Valid request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"email\": \"{{user.email.new}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.new}}\",\n    \"firstName\": \"{{user.firstName.new}}\",\n    \"lastName\": \"{{user.lastName.new}}\",\n    \"description\": \"{{user.description}}\",\n    \"avatarReference\": \"{{user.avatarReference}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/users/{{user.username}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"{{user.username}}"
															]
														}
													},
													"response": [
														{
															"name": "Ok",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/users/:username",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		":username"
																	],
																	"variable": [
																		{
																			"key": "username"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Unauthorized",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 401\", function () {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"type": "text",
																"value": "{{cookie.invalid}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"email\": \"{{user.email.new}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.new}}\",\n    \"firstName\": \"{{user.firstName.new}}\",\n    \"lastName\": \"{{user.lastName.new}}\",\n    \"description\": \"{{user.description}}\",\n    \"avatarReference\": \"{{user.avatarReference}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/users/{{user.username}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"{{user.username}}"
															]
														}
													},
													"response": [
														{
															"name": "Ok",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/users/:username",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		":username"
																	],
																	"variable": [
																		{
																			"key": "username"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "Get users",
									"item": [
										{
											"name": "Valid request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns username\", () => {",
															"    const username = postman.getEnvironmentVariable(\"user.username\");",
															"",
															"    const foundUser = pm.response.json().results.find(u => u.username === username);",
															"",
															"    pm.expect(foundUser).to.be.not.null",
															"});",
															"",
															"pm.test(\"Returns email\", () => {",
															"    const email = postman.getEnvironmentVariable(\"user.email.new\");",
															"",
															"    const foundUser = pm.response.json().results.find(u => u.email === email);",
															"",
															"    pm.expect(foundUser).to.be.not.null;",
															"});",
															"",
															"pm.test(\"Returns phone number\", () => {",
															"    const phoneNumber = postman.getEnvironmentVariable(\"user.phoneNumber.new\");",
															"",
															"    const foundUser = pm.response.json().results.find(u => u.phoneNumber === phoneNumber);",
															"",
															"    pm.expect(foundUser).to.be.not.null;",
															"});",
															"",
															"pm.test(\"Returns first name\", () => {",
															"    const firstName = postman.getEnvironmentVariable(\"user.firstName.new\");",
															"",
															"    const foundUser = pm.response.json().results.find(u => u.firstName === firstName);",
															"",
															"    pm.expect(foundUser).to.be.not.null;",
															"});",
															"",
															"pm.test(\"Returns last name\", () => {",
															"    const lastName = postman.getEnvironmentVariable(\"user.lastName.new\");",
															"",
															"    const foundUser = pm.response.json().results.find(u => u.lastName === lastName);",
															"",
															"    pm.expect(foundUser).to.be.not.null;",
															"});",
															"",
															"pm.test(\"Returns description\", () => {",
															"    const description = postman.getEnvironmentVariable(\"user.description\");",
															"",
															"    const foundUser = pm.response.json().results.find(u => u.description === description);",
															"",
															"    pm.expect(foundUser).to.be.not.null;",
															"});",
															"",
															"pm.test(\"Returns avatar reference\", () => {",
															"    const avatarReference = postman.getEnvironmentVariable(\"user.avatarReference\");",
															"",
															"    const foundUser = pm.response.json().results.find(u => u.avatarReference === avatarReference);",
															"",
															"    pm.expect(foundUser).to.be.not.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query match",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns list\", () => {\r",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns username\", () => {\r",
															"    const username = postman.getEnvironmentVariable(\"user.username\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.username === username);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null\r",
															"});\r",
															"\r",
															"pm.test(\"Returns email\", () => {\r",
															"    const email = postman.getEnvironmentVariable(\"user.email.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.email === email);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns phone number\", () => {\r",
															"    const phoneNumber = postman.getEnvironmentVariable(\"user.phoneNumber.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.phoneNumber === phoneNumber);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns first name\", () => {\r",
															"    const firstName = postman.getEnvironmentVariable(\"user.firstName.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.firstName === firstName);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns last name\", () => {\r",
															"    const lastName = postman.getEnvironmentVariable(\"user.lastName.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.lastName === lastName);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns description\", () => {\r",
															"    const description = postman.getEnvironmentVariable(\"user.description\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.description === description);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns avatar reference\", () => {\r",
															"    const avatarReference = postman.getEnvironmentVariable(\"user.avatarReference\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.avatarReference === avatarReference);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?username={{user.username}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "username",
															"value": "{{user.username}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query no match",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns list\", () => {\r",
															"    pm.expect(pm.response.json().results.length).to.be.equal(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?username=unknownusername",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "username",
															"value": "unknownusername"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query partial match",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns list\", () => {\r",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns username\", () => {\r",
															"    const username = postman.getEnvironmentVariable(\"user.username\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.username === username);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null\r",
															"});\r",
															"\r",
															"pm.test(\"Returns email\", () => {\r",
															"    const email = postman.getEnvironmentVariable(\"user.email.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.email === email);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns phone number\", () => {\r",
															"    const phoneNumber = postman.getEnvironmentVariable(\"user.phoneNumber.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.phoneNumber === phoneNumber);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns first name\", () => {\r",
															"    const firstName = postman.getEnvironmentVariable(\"user.firstName.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.firstName === firstName);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns last name\", () => {\r",
															"    const lastName = postman.getEnvironmentVariable(\"user.lastName.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.lastName === lastName);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns description\", () => {\r",
															"    const description = postman.getEnvironmentVariable(\"user.description\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.description === description);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns avatar reference\", () => {\r",
															"    const avatarReference = postman.getEnvironmentVariable(\"user.avatarReference\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.avatarReference === avatarReference);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?username={{user.username.partial}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "username",
															"value": "{{user.username.partial}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query case insensitive match",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns list\", () => {\r",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns username\", () => {\r",
															"    const username = postman.getEnvironmentVariable(\"user.username\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.username === username);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null\r",
															"});\r",
															"\r",
															"pm.test(\"Returns email\", () => {\r",
															"    const email = postman.getEnvironmentVariable(\"user.email.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.email === email);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns phone number\", () => {\r",
															"    const phoneNumber = postman.getEnvironmentVariable(\"user.phoneNumber.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.phoneNumber === phoneNumber);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns first name\", () => {\r",
															"    const firstName = postman.getEnvironmentVariable(\"user.firstName.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.firstName === firstName);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns last name\", () => {\r",
															"    const lastName = postman.getEnvironmentVariable(\"user.lastName.new\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.lastName === lastName);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns description\", () => {\r",
															"    const description = postman.getEnvironmentVariable(\"user.description\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.description === description);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});\r",
															"\r",
															"pm.test(\"Returns avatar reference\", () => {\r",
															"    const avatarReference = postman.getEnvironmentVariable(\"user.avatarReference\");\r",
															"\r",
															"    const foundUser = pm.response.json().results.find(u => u.avatarReference === avatarReference);\r",
															"\r",
															"    pm.expect(foundUser).to.be.not.null;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?username={{user.username.uppercase}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "username",
															"value": "{{user.username.uppercase}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create user",
									"item": [
										{
											"name": "Username",
											"item": [
												{
													"name": "Already in use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 409\", () => {",
																	"    pm.response.to.have.status(409);",
																	"});",
																	"",
																	"pm.test(\"Returns already in use error message\", () => {",
																	"    const username = postman.getEnvironmentVariable(\"user.username\");",
																	"    const expectedMessage = `Username ${username} already in use`;",
																	"",
																	"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username}}\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": null,\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (number)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": 2,\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (array)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": [\"{{user.username.2}}\"],\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (object)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {\n        \"username\": \"{{user.username.2}}\"\n    },\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Email",
											"item": [
												{
													"name": "Already in use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 409\", () => {",
																	"    pm.response.to.have.status(409);",
																	"});",
																	"",
																	"pm.test(\"Returns already in use error message\", () => {",
																	"    const email = postman.getEnvironmentVariable(\"user.email.new\");",
																	"    const expectedMessage = `Email ${email} already in use`;",
																	"",
																	"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"{{user.email.new}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": null,\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (number)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": 2,\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (array)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": [\"{{user.email.2}}\"],\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (object)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": {\n        \"email\": \"{{user.email.2}}\"\n    },\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"invalidFormat\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Phone number",
											"item": [
												{
													"name": "Already in use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 409\", () => {",
																	"    pm.response.to.have.status(409);",
																	"});",
																	"",
																	"pm.test(\"Returns already in use error message\", () => {",
																	"    const phoneNumber = postman.getEnvironmentVariable(\"user.phoneNumber.new\");",
																	"    const expectedMessage = `Phone number ${phoneNumber} already in use`;",
																	"",
																	"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.new}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": null,\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (number)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": 2,\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (array)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": [\"{{user.phoneNumber.2}}\"],\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (object)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": {\n        \"phoneNumber\": \"{{user.phoneNumber.2}}\"\n    },\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"badFormat\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "First name",
											"item": [
												{
													"name": "Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": null,\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (number)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": 2,\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (array)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": [\"{{user.firstName.2}}\"],\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (object)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": {\n        \"firstName\": \"{{user.firstName.2}}\"\n    },\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"123\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Last name",
											"item": [
												{
													"name": "Null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": null\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (number)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": 2\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (array)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": [\"{{user.lastName.2}}\"]\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad type (object)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": {\n        \"lastName\": \"{{user.lastName.2}}\"\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Bad format",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": {{user.username.2}},\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"123\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users"
																	]
																}
															},
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Valid request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Returns header location\", () => {",
															"    const username = postman.getEnvironmentVariable(\"user.username.2\");",
															"    const expectedHeaderLocation = `/users/${username}`;",
															"",
															"    pm.response.to.have.header(\"Location\");",
															"    pm.response.to.be.header(\"Location\", expectedHeaderLocation);",
															"});",
															"",
															"pm.test(\"Returns username\", () => {",
															"    const username = postman.getEnvironmentVariable(\"user.username.2\");",
															"",
															"    pm.expect(username).to.contain(pm.response.json().username);",
															"});",
															"",
															"pm.test(\"Returns email\", () => {",
															"    const email = postman.getEnvironmentVariable(\"user.email.2\");",
															"",
															"    pm.expect(email).to.contain(pm.response.json().email);",
															"});",
															"",
															"pm.test(\"Returns phone number\", () => {",
															"    const phoneNumber = postman.getEnvironmentVariable(\"user.phoneNumber.2\");",
															"",
															"    pm.expect(phoneNumber).to.contain(pm.response.json().phoneNumber);",
															"});",
															"",
															"pm.test(\"Returns first name\", () => {",
															"    const firstName = postman.getEnvironmentVariable(\"user.firstName.2\");",
															"",
															"    pm.expect(firstName).to.contain(pm.response.json().firstName);",
															"});",
															"",
															"pm.test(\"Returns last name\", () => {",
															"    const lastName = postman.getEnvironmentVariable(\"user.lastName.2\");",
															"",
															"    pm.expect(lastName).to.contain(pm.response.json().lastName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{user.username.2}}\",\n    \"email\": \"{{user.email.2}}\",\n    \"phoneNumber\": \"{{user.phoneNumber.2}}\",\n    \"firstName\": \"{{user.firstName.2}}\",\n    \"lastName\": \"{{user.lastName.2}}\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													]
												}
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users"
															]
														}
													},
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "posts",
							"item": [
								{
									"name": "{postId}",
									"item": [
										{
											"name": "Get post",
											"item": [
												{
													"name": "Post ID",
													"item": [
														{
															"name": "Non existent",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 404\", () => {",
																			"    pm.response.to.have.status(404);",
																			"});",
																			"",
																			"pm.test(\"Returns non existent error message\", () => {",
																			"    const postId = postman.getEnvironmentVariable(\"post.postId.nonExistent\");",
																			"    const expectedMessage = `Post ${postId} doesn't exist`;",
																			"",
																			"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"description\": \"{{post.description.2}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId.nonExistent}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId.nonExistent}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "Valid request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Returns ID\", () => {",
																	"    pm.expect(pm.response.json().id).to.not.equal(null);",
																	"});",
																	"",
																	"pm.test(\"Returns reference\", () => {",
																	"    const reference = postman.getEnvironmentVariable(\"post.reference\");",
																	"",
																	"    pm.expect(reference).to.contain(pm.response.json().reference);",
																	"});",
																	"",
																	"pm.test(\"Returns description\", () => {",
																	"    const description = postman.getEnvironmentVariable(\"post.description\");",
																	"",
																	"    pm.expect(description).to.contain(pm.response.json().description);",
																	"});",
																	"",
																	"pm.test(\"Returns hashtags\", () => {",
																	"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag\");",
																	"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag\");",
																	"",
																	"    pm.expect(pm.response.json().hashtags.length).to.be.equal(2);",
																	"    pm.expect(firstHashtag).to.contain(pm.response.json().hashtags[0]);",
																	"    pm.expect(secondHashtag).to.contain(pm.response.json().hashtags[1]);",
																	"});",
																	"",
																	"pm.test(\"Returns usertags\", () => {",
																	"    const usertag = postman.getEnvironmentVariable(\"user.username.other\");",
																	"",
																	"    pm.expect(pm.response.json().usertags.length).to.be.equal(1);",
																	"    pm.expect(usertag).to.contain(pm.response.json().usertags[0]);",
																	"});",
																	"",
																	"pm.test(\"Returns user\", () => {",
																	"    const user = postman.getEnvironmentVariable(\"user.username\");",
																	"",
																	"    pm.expect(user).to.contain(pm.response.json().user);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Modify post",
											"item": [
												{
													"name": "Post ID",
													"item": [
														{
															"name": "Non existent",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 404\", () => {",
																			"    pm.response.to.have.status(404);",
																			"});",
																			"",
																			"pm.test(\"Returns non existent error message\", () => {",
																			"    const postId = postman.getEnvironmentVariable(\"post.postId.nonExistent\");",
																			"    const expectedMessage = `Post ${postId} doesn't exist`;",
																			"",
																			"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.new}}\",\n        \"{{post.hashtags.secondHashtag.new}}\"\n    ],\n    \"description\": \"{{post.description.new}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId.nonExistent}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId.nonExistent}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "Description",
													"item": [
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"description\": 2\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"description\": [\"{{post.description.new}}\"]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"description\": {\n        \"description\": \"{{post.description.new}}\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Ok",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/users/:username",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "Hashtags",
													"item": [
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"hashtags\": [2]\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"hashtags\": [[\"{{post.hashtags.firstHashtag.new}}\"]]\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"hashtags\": [{\n        \"hashtags\": \"{{post.hashtags.firstHashtag.new}}\"\n    }]\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "Usertags",
													"item": [
														{
															"name": "Non existent",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 404\", () => {",
																			"    pm.response.to.have.status(404);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [\"nonExistent\"],\n    \"description\": \"{{post.description.2}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														},
														{
															"name": "Bad type (number)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [2],\n    \"description\": \"{{post.description.2}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														},
														{
															"name": "Bad type (array)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [[\"{{user.username.other}}\"]],\n    \"description\": \"{{post.description.2}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														},
														{
															"name": "Bad type (object)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 400\", () => {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"usertags\": [\n        {\n            \"usertags\": \"{{user.username.other}}\"\n        }\n    ],\n    \"description\": \"{{post.description.2}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "Valid request",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.new}}\",\n        \"{{post.hashtags.secondHashtag.new}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.new}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}"
															]
														}
													},
													"response": [
														{
															"name": "Ok",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/users/:username",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		":username"
																	],
																	"variable": [
																		{
																			"key": "username"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Unauthorized",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 401\", function () {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Cookie",
																"type": "text",
																"value": "{{cookie.invalid}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.new}}\",\n        \"{{post.hashtags.secondHashtag.new}}\"\n    ],\n    \"usertags\": [],\n    \"description\": \"{{post.description.new}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}"
															]
														}
													},
													"response": [
														{
															"name": "Ok",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/users/:username",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		":username"
																	],
																	"variable": [
																		{
																			"key": "username"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "Post comment",
											"item": [
												{
													"name": "No text",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}/comments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}",
																"comments"
															]
														}
													},
													"response": []
												},
												{
													"name": "Non-existent post ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 404\", () => {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Returns non existent error message\", () => {",
																	"    const postId = postman.getEnvironmentVariable(\"post.postId.nonExistent\");",
																	"    const expectedMessage = `Post ${postId} doesn't exist`;",
																	"",
																	"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"text\": \"Awesome post dude!\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId.nonExistent}}/comments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId.nonExistent}}",
																"comments"
															]
														}
													},
													"response": []
												},
												{
													"name": "Invalid post ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Returns non existent error message\", () => {\r",
																	"    const expectedMessage = 'ID is invalid';\r",
																	"    pm.expect(expectedMessage).to.equal(pm.response.json().message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"text\": \"Awesome post dude!\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/235235/comments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"235235",
																"comments"
															]
														}
													},
													"response": []
												},
												{
													"name": "Unauthorized",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 401\", () => {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Returns non existent error message\", () => {\r",
																	"    const expectedMessage = \"Cannot perform this action signed off\";\r",
																	"    pm.expect(expectedMessage).to.equal(pm.response.json().message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie.invalid}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"text\": \"Awesome post dude!\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}/comments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}",
																"comments"
															]
														}
													},
													"response": []
												},
												{
													"name": "Valid request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 201\", () => {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"const baseUrl = pm.environment.get(\"baseUrl\");\r",
																	"const postId = pm.environment.get(\"post.postId\");\r",
																	"\r",
																	"pm.test(\"Post has comment on GET\", () => {\r",
																	"    pm.sendRequest(baseUrl + \"/posts/\" + postId, function (err, response) {\r",
																	"        console.log(response.json());\r",
																	"        pm.expect(response.json().comments.length).to.eql(1);\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"text\": \"Awesome post dude!\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}/comments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}",
																"comments"
															]
														}
													},
													"response": []
												},
												{
													"name": "Allows multiple comments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 201\", () => {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"const baseUrl = pm.environment.get(\"baseUrl\");\r",
																	"const postId = pm.environment.get(\"post.postId\");\r",
																	"\r",
																	"pm.test(\"Post has two comments on GET\", () => {\r",
																	"    pm.sendRequest(baseUrl + \"/posts/\" + postId, function (err, response) {\r",
																	"        console.log(response.json());\r",
																	"        pm.expect(response.json().comments.length).to.eql(2);\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"text\": \"Awesome post dude!\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}/comments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}",
																"comments"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Post reaction",
											"item": [
												{
													"name": "Non-existent post ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId.nonExistent}}/reactions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId.nonExistent}}",
																"reactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Invalid post ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Returns non existent error message\", () => {\r",
																	"    const expectedMessage = 'ID is invalid';\r",
																	"    pm.expect(expectedMessage).to.equal(pm.response.json().message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/posts/235235/reactions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"235235",
																"reactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Unauthorized",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 401\", () => {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Returns non existent error message\", () => {\r",
																	"    const expectedMessage = \"Cannot perform this action signed off\";\r",
																	"    pm.expect(expectedMessage).to.equal(pm.response.json().message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie.invalid}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}/reactions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}",
																"reactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Valid request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 201\", () => {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"const baseUrl = pm.environment.get(\"baseUrl\");\r",
																	"const postId = pm.environment.get(\"post.postId\");\r",
																	"\r",
																	"pm.test(\"Post has reaction on GET\", () => {\r",
																	"    pm.sendRequest(baseUrl + \"/posts/\" + postId, function (err, response) {\r",
																	"        console.log(response.json());\r",
																	"        pm.expect(response.json().reactions.length).to.eql(1);\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}/reactions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}",
																"reactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Diallows multiple reactions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", () => {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}/reactions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}",
																"reactions"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete post",
											"item": [
												{
													"name": "Post ID",
													"item": [
														{
															"name": "Non existent",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 404\", () => {",
																			"    pm.response.to.have.status(404);",
																			"});",
																			"",
																			"pm.test(\"Returns non existent error message\", () => {",
																			"    const postId = postman.getEnvironmentVariable(\"post.postId.nonExistent\");",
																			"    const expectedMessage = `Post ${postId} doesn't exist`;",
																			"",
																			"    pm.expect(expectedMessage).to.contain(pm.response.json().message);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Cookie",
																		"value": "{{cookie}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"reference\": \"{{post.reference.2}}\",\n    \"hashtags\": [\n        \"{{post.hashtags.firstHashtag.2}}\",\n        \"{{post.hashtags.secondHashtag.2}}\"\n    ],\n    \"description\": \"{{post.description.2}}\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/posts/{{post.postId.nonExistent}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"posts",
																		"{{post.postId.nonExistent}}"
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/users/:username/posts",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"users",
																				":username",
																				"posts"
																			],
																			"variable": [
																				{
																					"key": "username"
																				}
																			]
																		}
																	},
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "Unauthorized",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 401\", () => {",
																	"    pm.response.to.have.status(401);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Cookie",
																"type": "text",
																"value": "{{cookie.invalid}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Valid request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Cookie",
																"value": "{{cookie}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/posts/{{post.postId}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"posts",
																"{{post.postId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get posts",
									"item": [
										{
											"name": "Valid request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    pm.expect(pm.response.json().count).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns lastKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns ID\", () => {",
															"    pm.expect(pm.response.json().results[0].id).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns reference\", () => {",
															"    const reference = postman.getEnvironmentVariable(\"post.reference.2\");",
															"",
															"    pm.expect(reference).to.contain(pm.response.json().results[0].reference);",
															"});",
															"",
															"pm.test(\"Returns description\", () => {",
															"    const description = postman.getEnvironmentVariable(\"post.description.2\");",
															"",
															"    pm.expect(description).to.contain(pm.response.json().results[0].description);",
															"});",
															"",
															"pm.test(\"Returns hashtags\", () => {",
															"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag.2\");",
															"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag.2\");",
															"",
															"    pm.expect(pm.response.json().results[0].hashtags.length).to.be.equal(2);",
															"    pm.expect(firstHashtag).to.contain(pm.response.json().results[0].hashtags[0]);",
															"    pm.expect(secondHashtag).to.contain(pm.response.json().results[0].hashtags[1]);",
															"});",
															"",
															"pm.test(\"Returns usertags\", () => {",
															"    pm.expect(pm.response.json().results[0].usertags.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns user\", () => {",
															"    const user = postman.getEnvironmentVariable(\"user.username\");",
															"",
															"    pm.expect(user).to.contain(pm.response.json().results[0].user);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													]
												}
											},
											"response": []
										},
										{
											"name": "Query match by hashtag",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    pm.expect(pm.response.json().count).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns lastKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns ID\", () => {",
															"    pm.expect(pm.response.json().results[0].id).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns reference\", () => {",
															"    const reference = postman.getEnvironmentVariable(\"post.reference.2\");",
															"",
															"    pm.expect(reference).to.contain(pm.response.json().results[0].reference);",
															"});",
															"",
															"pm.test(\"Returns description\", () => {",
															"    const description = postman.getEnvironmentVariable(\"post.description.2\");",
															"",
															"    pm.expect(description).to.contain(pm.response.json().results[0].description);",
															"});",
															"",
															"pm.test(\"Returns hashtags\", () => {",
															"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag.2\");",
															"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag.2\");",
															"",
															"    pm.expect(pm.response.json().results[0].hashtags.length).to.be.equal(2);",
															"    pm.expect(firstHashtag).to.contain(pm.response.json().results[0].hashtags[0]);",
															"    pm.expect(secondHashtag).to.contain(pm.response.json().results[0].hashtags[1]);",
															"});",
															"",
															"pm.test(\"Returns usertags\", () => {",
															"    pm.expect(pm.response.json().results[0].usertags.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns user\", () => {",
															"    const user = postman.getEnvironmentVariable(\"user.username\");",
															"",
															"    pm.expect(user).to.contain(pm.response.json().results[0].user);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?hashtag={{post.hashtags.firstHashtag}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "hashtag",
															"value": "{{post.hashtags.firstHashtag}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query partial match by hashtag",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    pm.expect(pm.response.json().count).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns lastKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns ID\", () => {",
															"    pm.expect(pm.response.json().results[0].id).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns reference\", () => {",
															"    const reference = postman.getEnvironmentVariable(\"post.reference.2\");",
															"",
															"    pm.expect(reference).to.contain(pm.response.json().results[0].reference);",
															"});",
															"",
															"pm.test(\"Returns description\", () => {",
															"    const description = postman.getEnvironmentVariable(\"post.description.2\");",
															"",
															"    pm.expect(description).to.contain(pm.response.json().results[0].description);",
															"});",
															"",
															"pm.test(\"Returns hashtags\", () => {",
															"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag.2\");",
															"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag.2\");",
															"",
															"    pm.expect(pm.response.json().results[0].hashtags.length).to.be.equal(2);",
															"    pm.expect(firstHashtag).to.contain(pm.response.json().results[0].hashtags[0]);",
															"    pm.expect(secondHashtag).to.contain(pm.response.json().results[0].hashtags[1]);",
															"});",
															"",
															"pm.test(\"Returns usertags\", () => {",
															"    pm.expect(pm.response.json().results[0].usertags.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns user\", () => {",
															"    const user = postman.getEnvironmentVariable(\"user.username\");",
															"",
															"    pm.expect(user).to.contain(pm.response.json().results[0].user);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?hashtag={{post.hashtags.firstHashtag.partial}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "hashtag",
															"value": "{{post.hashtags.firstHashtag.partial}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query no match by hashtag",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equals(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    pm.expect(pm.response.json().count).to.be.equals(0);",
															"});",
															"",
															"pm.test(\"Returns null firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.equal(null);",
															"});",
															"",
															"pm.test(\"Returns null lastKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?hashtag=unknowntag",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "hashtag",
															"value": "unknowntag"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query match by description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    pm.expect(pm.response.json().count).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns lastKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns ID\", () => {",
															"    pm.expect(pm.response.json().results[0].id).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns reference\", () => {",
															"    const reference = postman.getEnvironmentVariable(\"post.reference.2\");",
															"",
															"    pm.expect(reference).to.contain(pm.response.json().results[0].reference);",
															"});",
															"",
															"pm.test(\"Returns description\", () => {",
															"    const description = postman.getEnvironmentVariable(\"post.description.2\");",
															"",
															"    pm.expect(description).to.contain(pm.response.json().results[0].description);",
															"});",
															"",
															"pm.test(\"Returns hashtags\", () => {",
															"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag.2\");",
															"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag.2\");",
															"",
															"    pm.expect(pm.response.json().results[0].hashtags.length).to.be.equal(2);",
															"    pm.expect(firstHashtag).to.contain(pm.response.json().results[0].hashtags[0]);",
															"    pm.expect(secondHashtag).to.contain(pm.response.json().results[0].hashtags[1]);",
															"});",
															"",
															"pm.test(\"Returns usertags\", () => {",
															"    pm.expect(pm.response.json().results[0].usertags.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns user\", () => {",
															"    const user = postman.getEnvironmentVariable(\"user.username\");",
															"",
															"    pm.expect(user).to.contain(pm.response.json().results[0].user);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?description={{post.description.2}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "description",
															"value": "{{post.description.2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query case insensitive match by description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    pm.expect(pm.response.json().count).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns lastKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns ID\", () => {",
															"    pm.expect(pm.response.json().results[0].id).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns reference\", () => {",
															"    const reference = postman.getEnvironmentVariable(\"post.reference.2\");",
															"",
															"    pm.expect(reference).to.contain(pm.response.json().results[0].reference);",
															"});",
															"",
															"pm.test(\"Returns description\", () => {",
															"    const description = postman.getEnvironmentVariable(\"post.description.2\");",
															"",
															"    pm.expect(description).to.contain(pm.response.json().results[0].description);",
															"});",
															"",
															"pm.test(\"Returns hashtags\", () => {",
															"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag.2\");",
															"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag.2\");",
															"",
															"    pm.expect(pm.response.json().results[0].hashtags.length).to.be.equal(2);",
															"    pm.expect(firstHashtag).to.contain(pm.response.json().results[0].hashtags[0]);",
															"    pm.expect(secondHashtag).to.contain(pm.response.json().results[0].hashtags[1]);",
															"});",
															"",
															"pm.test(\"Returns usertags\", () => {",
															"    pm.expect(pm.response.json().results[0].usertags.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns user\", () => {",
															"    const user = postman.getEnvironmentVariable(\"user.username\");",
															"",
															"    pm.expect(user).to.contain(pm.response.json().results[0].user);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?description={{post.description.2.uppercase}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "description",
															"value": "{{post.description.2.uppercase}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query partial match by description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    pm.expect(pm.response.json().count).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Returns firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns lastKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns ID\", () => {",
															"    pm.expect(pm.response.json().results[0].id).to.not.equal(null);",
															"});",
															"",
															"pm.test(\"Returns reference\", () => {",
															"    const reference = postman.getEnvironmentVariable(\"post.reference.2\");",
															"",
															"    pm.expect(reference).to.contain(pm.response.json().results[0].reference);",
															"});",
															"",
															"pm.test(\"Returns description\", () => {",
															"    const description = postman.getEnvironmentVariable(\"post.description.2\");",
															"",
															"    pm.expect(description).to.contain(pm.response.json().results[0].description);",
															"});",
															"",
															"pm.test(\"Returns hashtags\", () => {",
															"    const firstHashtag = postman.getEnvironmentVariable(\"post.hashtags.firstHashtag.2\");",
															"    const secondHashtag = postman.getEnvironmentVariable(\"post.hashtags.secondHashtag.2\");",
															"",
															"    pm.expect(pm.response.json().results[0].hashtags.length).to.be.equal(2);",
															"    pm.expect(firstHashtag).to.contain(pm.response.json().results[0].hashtags[0]);",
															"    pm.expect(secondHashtag).to.contain(pm.response.json().results[0].hashtags[1]);",
															"});",
															"",
															"pm.test(\"Returns usertags\", () => {",
															"    pm.expect(pm.response.json().results[0].usertags.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns user\", () => {",
															"    const user = postman.getEnvironmentVariable(\"user.username\");",
															"",
															"    pm.expect(user).to.contain(pm.response.json().results[0].user);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?description={{post.description.2.partial}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "description",
															"value": "{{post.description.2.partial}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query no match by description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equals(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    pm.expect(pm.response.json().count).to.be.equals(0);",
															"});",
															"",
															"pm.test(\"Returns null firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.equal(null);",
															"});",
															"",
															"pm.test(\"Returns null lastKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?description=unknowndescription",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "description",
															"value": "unknowndescription"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "hashtags",
							"item": [
								{
									"name": "Valid request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const baseUrl = pm.environment.get(\"baseUrl\");\r",
													"const username = pm.environment.get(\"user.username\");\r",
													"const cookie = pm.environment.get('cookie');\r",
													"\r",
													"const bodies = [\r",
													"    {\r",
													"        reference: \"test\",\r",
													"        usertags: [],\r",
													"        \"hashtags\": [\"Hello\", \"World\"],\r",
													"    },\r",
													"    {\r",
													"        reference: \"test\",\r",
													"        usertags: [],\r",
													"        \"hashtags\": [\"HELLO\", \"YOLO\"],\r",
													"    },\r",
													"    {\r",
													"        reference: \"test\",\r",
													"        usertags: [],\r",
													"        \"hashtags\": [\"hello\", \"world\"],\r",
													"    },\r",
													"    {\r",
													"        reference: \"test\",\r",
													"        usertags: [],\r",
													"        \"hashtags\": [\"Allo\", \"Monde\"],\r",
													"    },\r",
													"];\r",
													"\r",
													"for (const body of bodies) {\r",
													"    pm.sendRequest({\r",
													"        url: baseUrl + '/users/' + username + '/posts',\r",
													"        method: 'POST',\r",
													"        header: {\r",
													"            'content-type': 'application/json',\r",
													"            'x-site-code': pm.environment.get(\"x-site-code\"),\r",
													"            'Cookie': cookie\r",
													"        },\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(body)\r",
													"        }\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = [{\"name\":\"allo\",\"count\":1},{\"name\":\"firsthashtag2\",\"count\":1},{\"name\":\"hello\",\"count\":3},{\"name\":\"monde\",\"count\":1},{\"name\":\"secondhashtag2\",\"count\":1},{\"name\":\"world\",\"count\":2},{\"name\":\"yolo\",\"count\":1}];\r",
													"\r",
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected result\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "{{cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/hashtags",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hashtags"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid request with like",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = [\r",
													"    {\r",
													"        \"name\": \"firsthashtag2\",\r",
													"        \"count\": 1\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"secondhashtag2\",\r",
													"        \"count\": 1\r",
													"    }\r",
													"];\r",
													"\r",
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected result\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "{{cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/hashtags?like=hash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hashtags"
											],
											"query": [
												{
													"key": "like",
													"value": "hash"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid request with limit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = [\r",
													"    {\r",
													"        \"name\": \"allo\",\r",
													"        \"count\": 1\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"firsthashtag2\",\r",
													"        \"count\": 1\r",
													"    }\r",
													"];\r",
													"\r",
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected result\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "{{cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/hashtags?limit=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hashtags"
											],
											"query": [
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid request with after",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = [\r",
													"    {\r",
													"        \"name\": \"world\",\r",
													"        \"count\": 2\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"yolo\",\r",
													"        \"count\": 1\r",
													"    }\r",
													"];\r",
													"\r",
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected result\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{cookie}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/hashtags?after=w",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hashtags"
											],
											"query": [
												{
													"key": "after",
													"value": "w"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid request with orderBy count",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = [\r",
													"    {\r",
													"        \"name\": \"hello\",\r",
													"        \"count\": 3\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"world\",\r",
													"        \"count\": 2\r",
													"    },\r",
													"];\r",
													"\r",
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected result\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.slice(0, 2)).to.eql(expected);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "{{cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/hashtags?orderBy=count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hashtags"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "count"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "notifications",
							"item": [
								{
									"name": "Valid request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns notifications\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.length).to.eql(1);\r",
													"\tpm.expect(jsonData[0].type).to.eql('reaction');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"value": "{{cookie}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "search",
							"item": [
								{
									"name": "Valid request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns correct amount of users\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.users.length).to.eql(3);\r",
													"});\r",
													"\r",
													"const expectedHashtags = [\r",
													"    {\r",
													"        \"name\": \"hello\",\r",
													"        \"count\": 3\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"world\",\r",
													"        \"count\": 2\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"monde\",\r",
													"        \"count\": 1\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"yolo\",\r",
													"        \"count\": 1\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"firsthashtag2\",\r",
													"        \"count\": 1\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"secondhashtag2\",\r",
													"        \"count\": 1\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"allo\",\r",
													"        \"count\": 1\r",
													"    }\r",
													"];\r",
													"\r",
													"pm.test(\"Returns correct hashtags\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.hashtags).to.have.deep.members(expectedHashtags);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns correct description count\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.descriptionCount).to.eql(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{cookie}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/search",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid request with value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns correct amount of users\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.users.length).to.eql(2);\r",
													"});\r",
													"\r",
													"const expectedHashtags = [\r",
													"    {\r",
													"        \"name\": \"firsthashtag2\",\r",
													"        \"count\": 1\r",
													"    },\r",
													"    {\r",
													"        \"name\": \"secondhashtag2\",\r",
													"        \"count\": 1\r",
													"    }\r",
													"];\r",
													"\r",
													"pm.test(\"Returns correct hashtags\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.hashtags).to.have.deep.members(expectedHashtags);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns correct description count\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.descriptionCount).to.eql(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{cookie}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/search?value=s",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "value",
													"value": "s"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid request with limit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns correct amount of users\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.users.length).to.eql(1);\r",
													"});\r",
													"\r",
													"const expectedHashtags = [\r",
													"    {\r",
													"        \"name\": \"hello\",\r",
													"        \"count\": 3\r",
													"    }\r",
													"];\r",
													"\r",
													"pm.test(\"Returns correct hashtags\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.hashtags).to.have.deep.members(expectedHashtags);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns correct description count\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.descriptionCount).to.eql(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{cookie}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/search?limit=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Pagination tests",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Get token info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"postman.setEnvironmentVariable(\"user.username\", jsonData.username);\r",
											"postman.setEnvironmentVariable(\"user.username.partial\", jsonData.username.substring(1,4));\r",
											"postman.setEnvironmentVariable(\"user.username.uppercase\", jsonData.username.toUpperCase());\r",
											"postman.setEnvironmentVariable(\"user.firstName\", jsonData.firstName);\r",
											"postman.setEnvironmentVariable(\"user.lastName\", jsonData.lastName);\r",
											"postman.setEnvironmentVariable(\"user.email\", jsonData.email);\r",
											"postman.setEnvironmentVariable(\"user.phoneNumber\", jsonData.phoneNumber);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "{{cookie}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tokenInfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tokenInfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create post (1, most dated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const post = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"post.pages.1.id\", post.id);",
											"postman.setEnvironmentVariable(\"post.pages.1.comparableCreatedAt\", `${post.createdAt}${post.id}`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{cookie}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reference\": \"{{post.reference}}\",\n    \"hashtags\": [],\n    \"usertags\": [],\n    \"description\": \"Post 1, most dated\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{user.username}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{user.username}}",
										"posts"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username",
												"posts"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
								}
							]
						},
						{
							"name": "Create post (2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const post = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"post.pages.2.id\", post.id);",
											"postman.setEnvironmentVariable(\"post.pages.2.comparableCreatedAt\", `${post.createdAt}${post.id}`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{cookie}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reference\": \"{{post.reference}}\",\n    \"hashtags\": [],\n    \"usertags\": [],\n    \"description\": \"Post 2, in middle\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{user.username}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{user.username}}",
										"posts"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username",
												"posts"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
								}
							]
						},
						{
							"name": "Create post (3, most recent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const post = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"post.pages.3.id\", post.id);",
											"postman.setEnvironmentVariable(\"post.pages.3.comparableCreatedAt\", `${post.createdAt}${post.id}`);",
											"",
											"postman.setEnvironmentVariable(\"post.pages.count\", 3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{cookie}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reference\": \"{{post.reference}}\",\n    \"hashtags\": [],\n    \"usertags\": [],\n    \"description\": \"Post 3, most recent\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{user.username}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{user.username}}",
										"posts"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"reference\": \"<string>\",\n    \"hashtags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"description\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:username/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":username",
												"posts"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"exercitation eu irure nisi consequat\",\n \"reference\": \"proident amet\",\n \"hashtags\": [\n  \"esse in\",\n  \"deserunt qui in aliqua\"\n ],\n \"user\": \"id sint\",\n \"createdAt\": \"2000-04-29T14:06:11.130Z\",\n \"description\": \"voluptate tempor\"\n}"
								}
							]
						},
						{
							"name": "Create user (1)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user.pages.1.username}}\",\n    \"email\": \"{{user.pages.1.email}}\",\n    \"phoneNumber\": \"{{user.pages.1.phoneNumber}}\",\n    \"firstName\": \"{{user.firstName}}\",\n    \"lastName\": \"{{user.lastName}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create user (2)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{user.pages.2.username}}\",\n    \"email\": \"{{user.pages.2.email}}\",\n    \"phoneNumber\": \"{{user.pages.2.phoneNumber}}\",\n    \"firstName\": \"{{user.firstName}}\",\n    \"lastName\": \"{{user.lastName}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get users (and setup page users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Returns 3 users\", () => {",
											"    pm.expect(jsonData.results.length).to.be.equal(3);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"user.pages.1.username\", jsonData.results[0].username);",
											"postman.setEnvironmentVariable(\"user.pages.2.username\", jsonData.results[1].username);",
											"postman.setEnvironmentVariable(\"user.pages.3.username\", jsonData.results[2].username);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{cookie}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "users",
							"item": [
								{
									"name": "{username}",
									"item": [
										{
											"name": "posts",
											"item": [
												{
													"name": "Get user's posts",
													"item": [
														{
															"name": "Before post 1",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns empty list\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(0);",
																			"});",
																			"",
																			"pm.test(\"Returns count\", () => {",
																			"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
																			"",
																			"    pm.expect(pm.response.json().count).to.be.equal(count);",
																			"});",
																			"",
																			"pm.test(\"Returns null firstKey\", () => {",
																			"    pm.expect(pm.response.json().firstKey).to.equal(null);",
																			"});",
																			"",
																			"pm.test(\"Returns null lastKey\", () => {",
																			"    pm.expect(pm.response.json().lastKey).to.equal(null);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts?before={{post.pages.1.comparableCreatedAt}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	],
																	"query": [
																		{
																			"key": "before",
																			"value": "{{post.pages.1.comparableCreatedAt}}"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Before post 2",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns list of 1 item\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
																			"});",
																			"",
																			"pm.test(\"Returns count\", () => {",
																			"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
																			"",
																			"    pm.expect(pm.response.json().count).to.be.equal(count);",
																			"});",
																			"",
																			"pm.test(\"Returns post 1 as firstKey\", () => {",
																			"    const firstKey = postman.getEnvironmentVariable(\"post.pages.1.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
																			"});",
																			"",
																			"pm.test(\"Returns post 1 as lastKey\", () => {",
																			"    const lastKey = postman.getEnvironmentVariable(\"post.pages.1.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts?before={{post.pages.2.comparableCreatedAt}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	],
																	"query": [
																		{
																			"key": "before",
																			"value": "{{post.pages.2.comparableCreatedAt}}"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Before post 3, limit 1",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns list of 1 item\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
																			"});",
																			"",
																			"pm.test(\"Returns count\", () => {",
																			"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
																			"",
																			"    pm.expect(pm.response.json().count).to.be.equal(count);",
																			"});",
																			"",
																			"pm.test(\"Returns post 2 as firstKey\", () => {",
																			"    const firstKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
																			"});",
																			"",
																			"pm.test(\"Returns post 2 as lastKey\", () => {",
																			"    const lastKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts?before={{post.pages.3.comparableCreatedAt}}&limit=1",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	],
																	"query": [
																		{
																			"key": "before",
																			"value": "{{post.pages.3.comparableCreatedAt}}"
																		},
																		{
																			"key": "limit",
																			"value": "1"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Before post 3",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns list of 2 items\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(2);",
																			"});",
																			"",
																			"pm.test(\"Returns count\", () => {",
																			"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
																			"",
																			"    pm.expect(pm.response.json().count).to.be.equal(count);",
																			"});",
																			"",
																			"pm.test(\"Returns post 2 as firstKey\", () => {",
																			"    const firstKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
																			"});",
																			"",
																			"pm.test(\"Returns post 1 as lastKey\", () => {",
																			"    const lastKey = postman.getEnvironmentVariable(\"post.pages.1.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts?before={{post.pages.3.comparableCreatedAt}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	],
																	"query": [
																		{
																			"key": "before",
																			"value": "{{post.pages.3.comparableCreatedAt}}"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "After post 1, limit 1",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns list of 1 item\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
																			"});",
																			"",
																			"pm.test(\"Returns count\", () => {",
																			"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
																			"",
																			"    pm.expect(pm.response.json().count).to.be.equal(count);",
																			"});",
																			"",
																			"pm.test(\"Returns post 2 as firstKey\", () => {",
																			"    const firstKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
																			"});",
																			"",
																			"pm.test(\"Returns post 2 as lastKey\", () => {",
																			"    const lastKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts?after={{post.pages.1.comparableCreatedAt}}&limit=1",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	],
																	"query": [
																		{
																			"key": "after",
																			"value": "{{post.pages.1.comparableCreatedAt}}"
																		},
																		{
																			"key": "limit",
																			"value": "1"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "After post 1",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns list of 2 items\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(2);",
																			"});",
																			"",
																			"pm.test(\"Returns count\", () => {",
																			"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
																			"",
																			"    pm.expect(pm.response.json().count).to.be.equal(count);",
																			"});",
																			"",
																			"pm.test(\"Returns post 3 as firstKey\", () => {",
																			"    const firstKey = postman.getEnvironmentVariable(\"post.pages.3.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
																			"});",
																			"",
																			"pm.test(\"Returns post 2 as lastKey\", () => {",
																			"    const lastKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts?after={{post.pages.1.comparableCreatedAt}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	],
																	"query": [
																		{
																			"key": "after",
																			"value": "{{post.pages.1.comparableCreatedAt}}"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "After post 2",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns list of 1 item\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
																			"});",
																			"",
																			"pm.test(\"Returns count\", () => {",
																			"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
																			"",
																			"    pm.expect(pm.response.json().count).to.be.equal(count);",
																			"});",
																			"",
																			"pm.test(\"Returns post 3 as firstKey\", () => {",
																			"    const firstKey = postman.getEnvironmentVariable(\"post.pages.3.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
																			"});",
																			"",
																			"pm.test(\"Returns post 3 as lastKey\", () => {",
																			"    const lastKey = postman.getEnvironmentVariable(\"post.pages.3.comparableCreatedAt\");",
																			"",
																			"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts?after={{post.pages.2.comparableCreatedAt}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	],
																	"query": [
																		{
																			"key": "after",
																			"value": "{{post.pages.2.comparableCreatedAt}}"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "After post 3",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Returns status 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Returns empty list\", () => {",
																			"    pm.expect(pm.response.json().results.length).to.be.equal(0);",
																			"});",
																			"",
																			"pm.test(\"Returns count\", () => {",
																			"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
																			"",
																			"    pm.expect(pm.response.json().count).to.be.equal(count);",
																			"});",
																			"",
																			"pm.test(\"Returns null firstKey\", () => {",
																			"    pm.expect(pm.response.json().firstKey).to.equal(null);",
																			"});",
																			"",
																			"pm.test(\"Returns null lastKey\", () => {",
																			"    pm.expect(pm.response.json().lastKey).to.equal(null);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Cookie",
																		"type": "text",
																		"value": "{{cookie}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/users/{{user.username}}/posts?after={{post.pages.3.comparableCreatedAt}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"users",
																		"{{user.username}}",
																		"posts"
																	],
																	"query": [
																		{
																			"key": "after",
																			"value": "{{post.pages.3.comparableCreatedAt}}"
																		}
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "Get users",
									"item": [
										{
											"name": "Before user 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns empty list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"user.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns null firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.equal(null);",
															"});",
															"",
															"pm.test(\"Returns null lastKey\", () => {",
															"    pm.expect(pm.response.json().lastKey).to.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?before={{user.pages.1.username}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "before",
															"value": "{{user.pages.1.username}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Before user 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 1 item\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"user.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns user 1 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"user.pages.1.username\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns user 1 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"user.pages.1.username\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?before={{user.pages.2.username}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "before",
															"value": "{{user.pages.2.username}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Before user 3, limit 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 1 item\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"user.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns user 2 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"user.pages.2.username\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns user 2 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"user.pages.2.username\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?before={{user.pages.3.username}}&limit=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "before",
															"value": "{{user.pages.3.username}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Before user 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 2 items\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(2);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"user.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns user 1 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"user.pages.1.username\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns user 2 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"user.pages.2.username\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?before={{user.pages.3.username}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "before",
															"value": "{{user.pages.3.username}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "After user 1, limit 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 1 item\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"user.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns user 2 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"user.pages.2.username\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns user 2 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"user.pages.2.username\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?after={{user.pages.1.username}}&limit=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "after",
															"value": "{{user.pages.1.username}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "After user 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 2 items\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(2);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"user.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns user 2 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"user.pages.2.username\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns user 3 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"user.pages.3.username\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?after={{user.pages.1.username}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "after",
															"value": "{{user.pages.1.username}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "After user 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 1 item\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"user.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns user 3 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"user.pages.3.username\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns user 3 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"user.pages.3.username\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?after={{user.pages.2.username}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "after",
															"value": "{{user.pages.2.username}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "After user 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns empty list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"user.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns null firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.equal(null);",
															"});",
															"",
															"pm.test(\"Returns null lastKey\", () => {",
															"    pm.expect(pm.response.json().lastKey).to.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users?after={{user.pages.3.username}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													],
													"query": [
														{
															"key": "after",
															"value": "{{user.pages.3.username}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "posts",
							"item": [
								{
									"name": "Get posts",
									"item": [
										{
											"name": "Before post 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns empty list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns null firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.equal(null);",
															"});",
															"",
															"pm.test(\"Returns null lastKey\", () => {",
															"    pm.expect(pm.response.json().lastKey).to.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?before={{post.pages.1.comparableCreatedAt}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "before",
															"value": "{{post.pages.1.comparableCreatedAt}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Before post 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 1 item\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns post 1 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"post.pages.1.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns post 1 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"post.pages.1.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?before={{post.pages.2.comparableCreatedAt}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "before",
															"value": "{{post.pages.2.comparableCreatedAt}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Before post 3, limit 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 1 item\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns post 2 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns post 2 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?before={{post.pages.3.comparableCreatedAt}}&limit=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "before",
															"value": "{{post.pages.3.comparableCreatedAt}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Before post 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 2 items\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(2);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns post 2 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns post 1 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"post.pages.1.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?before={{post.pages.3.comparableCreatedAt}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "before",
															"value": "{{post.pages.3.comparableCreatedAt}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "After post 1, limit 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 1 item\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns post 2 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns post 2 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?after={{post.pages.1.comparableCreatedAt}}&limit=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "after",
															"value": "{{post.pages.1.comparableCreatedAt}}"
														},
														{
															"key": "limit",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "After post 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 2 items\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(2);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns post 3 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"post.pages.3.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns post 2 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"post.pages.2.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?after={{post.pages.1.comparableCreatedAt}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "after",
															"value": "{{post.pages.1.comparableCreatedAt}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "After post 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns list of 1 item\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(1);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns post 3 as firstKey\", () => {",
															"    const firstKey = postman.getEnvironmentVariable(\"post.pages.3.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().firstKey).to.equal(firstKey);",
															"});",
															"",
															"pm.test(\"Returns post 3 as lastKey\", () => {",
															"    const lastKey = postman.getEnvironmentVariable(\"post.pages.3.comparableCreatedAt\");",
															"",
															"    pm.expect(pm.response.json().lastKey).to.equal(lastKey);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?after={{post.pages.2.comparableCreatedAt}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "after",
															"value": "{{post.pages.2.comparableCreatedAt}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "After post 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns empty list\", () => {",
															"    pm.expect(pm.response.json().results.length).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Returns count\", () => {",
															"    const count = parseInt(postman.getEnvironmentVariable(\"post.pages.count\"));",
															"",
															"    pm.expect(pm.response.json().count).to.be.equal(count);",
															"});",
															"",
															"pm.test(\"Returns null firstKey\", () => {",
															"    pm.expect(pm.response.json().firstKey).to.equal(null);",
															"});",
															"",
															"pm.test(\"Returns null lastKey\", () => {",
															"    pm.expect(pm.response.json().lastKey).to.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Cookie",
														"type": "text",
														"value": "{{cookie}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/posts?after={{post.pages.3.comparableCreatedAt}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													],
													"query": [
														{
															"key": "after",
															"value": "{{post.pages.3.comparableCreatedAt}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		}
	]
}